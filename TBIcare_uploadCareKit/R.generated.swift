//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `awsconfiguration.json`.
    static let awsconfigurationJson = Rswift.FileResource(bundle: R.hostingBundle, name: "awsconfiguration", pathExtension: "json")
    /// Resource file `ding.mp3`.
    static let dingMp3 = Rswift.FileResource(bundle: R.hostingBundle, name: "ding", pathExtension: "mp3")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "awsconfiguration", withExtension: "json")`
    static func awsconfigurationJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.awsconfigurationJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "ding", withExtension: "mp3")`
    static func dingMp3(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dingMp3
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 7 images.
  struct image {
    /// Image `ActiveLife`.
    static let activeLife = Rswift.ImageResource(bundle: R.hostingBundle, name: "ActiveLife")
    /// Image `Cardio`.
    static let cardio = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cardio")
    /// Image `Stethoscope`.
    static let stethoscope = Rswift.ImageResource(bundle: R.hostingBundle, name: "Stethoscope")
    /// Image `greenTick`.
    static let greenTick = Rswift.ImageResource(bundle: R.hostingBundle, name: "greenTick")
    /// Image `halfGreen`.
    static let halfGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "halfGreen")
    /// Image `info_yellow`.
    static let info_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "info_yellow")
    /// Image `loginLogo`.
    static let loginLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "loginLogo")
    
    /// `UIImage(named: "ActiveLife", bundle: ..., traitCollection: ...)`
    static func activeLife(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.activeLife, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cardio", bundle: ..., traitCollection: ...)`
    static func cardio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cardio, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Stethoscope", bundle: ..., traitCollection: ...)`
    static func stethoscope(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stethoscope, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "greenTick", bundle: ..., traitCollection: ...)`
    static func greenTick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenTick, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "halfGreen", bundle: ..., traitCollection: ...)`
    static func halfGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.halfGreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "info_yellow", bundle: ..., traitCollection: ...)`
    static func info_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info_yellow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loginLogo", bundle: ..., traitCollection: ...)`
    static func loginLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loginLogo, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `AttemptTableViewCell`.
    static let attemptTableViewCell = _R.nib._AttemptTableViewCell()
    /// Nib `AttemptsTableViewHeaderCell`.
    static let attemptsTableViewHeaderCell = _R.nib._AttemptsTableViewHeaderCell()
    
    /// `UINib(name: "AttemptTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.attemptTableViewCell) instead")
    static func attemptTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.attemptTableViewCell)
    }
    
    /// `UINib(name: "AttemptsTableViewHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.attemptsTableViewHeaderCell) instead")
    static func attemptsTableViewHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.attemptsTableViewHeaderCell)
    }
    
    static func attemptTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AttemptTableViewCell? {
      return R.nib.attemptTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AttemptTableViewCell
    }
    
    static func attemptsTableViewHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AttemptsTableViewHeaderCell? {
      return R.nib.attemptsTableViewHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AttemptsTableViewHeaderCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _AttemptTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AttemptTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AttemptTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AttemptTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _AttemptsTableViewHeaderCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AttemptsTableViewHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AttemptsTableViewHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AttemptsTableViewHeaderCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "loginLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'loginLogo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = OnBoardingViewController
      
      let bundle = R.hostingBundle
      let greatWorkoutViewController = StoryboardViewControllerResource<GreatWorkoutViewController>(identifier: "GreatWorkoutViewController")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Main"
      let onBoardingViewController = StoryboardViewControllerResource<OnBoardingViewController>(identifier: "OnBoardingViewController")
      let scoreInfoViewController = StoryboardViewControllerResource<ScoreInfoViewController>(identifier: "ScoreInfoViewController")
      let surveyVC = StoryboardViewControllerResource<SurveyViewController>(identifier: "SurveyVC")
      let workoutSurveyVC = StoryboardViewControllerResource<WorkoutSurveyViewController>(identifier: "WorkoutSurveyVC")
      
      func greatWorkoutViewController(_: Void = ()) -> GreatWorkoutViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: greatWorkoutViewController)
      }
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      func onBoardingViewController(_: Void = ()) -> OnBoardingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onBoardingViewController)
      }
      
      func scoreInfoViewController(_: Void = ()) -> ScoreInfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scoreInfoViewController)
      }
      
      func surveyVC(_: Void = ()) -> SurveyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: surveyVC)
      }
      
      func workoutSurveyVC(_: Void = ()) -> WorkoutSurveyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: workoutSurveyVC)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "loginLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'loginLogo' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().greatWorkoutViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'greatWorkoutViewController' could not be loaded from storyboard 'Main' as 'GreatWorkoutViewController'.") }
        if _R.storyboard.main().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Main' as 'LoginViewController'.") }
        if _R.storyboard.main().onBoardingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onBoardingViewController' could not be loaded from storyboard 'Main' as 'OnBoardingViewController'.") }
        if _R.storyboard.main().scoreInfoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scoreInfoViewController' could not be loaded from storyboard 'Main' as 'ScoreInfoViewController'.") }
        if _R.storyboard.main().surveyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'surveyVC' could not be loaded from storyboard 'Main' as 'SurveyViewController'.") }
        if _R.storyboard.main().workoutSurveyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'workoutSurveyVC' could not be loaded from storyboard 'Main' as 'WorkoutSurveyViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
